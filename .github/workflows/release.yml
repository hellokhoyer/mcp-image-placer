name: Release & Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.3)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  PACKAGE_NAME: 'mcp-image-placeholder'

jobs:
  validate:
    name: Pre-publish Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog_updated: ${{ steps.changelog.outputs.updated }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE=false
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            IS_PRERELEASE=${{ github.event.release.prerelease }}
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          echo "üì¶ Release Version: ${VERSION}"
          echo "üöÄ Pre-release: ${IS_PRERELEASE}"
          
      - name: Validate package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          echo "Package version: ${PACKAGE_VERSION}"
          echo "Release version: ${RELEASE_VERSION}"
          
          if [ "${PACKAGE_VERSION}" != "${RELEASE_VERSION}" ]; then
            echo "‚ùå Version mismatch!"
            echo "Package.json version: ${PACKAGE_VERSION}"
            echo "Release tag version: ${RELEASE_VERSION}"
            echo ""
            echo "Please update package.json version to match the release tag:"
            echo "npm version ${RELEASE_VERSION} --no-git-tag-version"
            exit 1
          fi
          
          echo "‚úÖ Version validation passed"
          
      - name: Check changelog update
        id: changelog
        run: |
          if grep -q "## \[${RELEASE_VERSION}\]" CHANGELOG.md; then
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changelog updated for version ${RELEASE_VERSION}"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Changelog not updated for version ${RELEASE_VERSION}"
          fi
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
          
      - name: Validate NPM package name
        run: |
          CURRENT_NAME=$(node -p "require('./package.json').name")
          
          if [ "${CURRENT_NAME}" != "${{ env.PACKAGE_NAME }}" ]; then
            echo "‚ùå Package name mismatch!"
            echo "Expected: ${{ env.PACKAGE_NAME }}"
            echo "Found: ${CURRENT_NAME}"
            exit 1
          fi
          
          echo "‚úÖ Package name validation passed"

  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type checking
        run: npm run type-check
        
      - name: Lint code
        run: npm run lint
        
      - name: Format check
        run: npm run format:check
        
      - name: Run tests with coverage
        run: npm run test:ci
        
      - name: Build project
        run: npm run build:clean
        
      - name: Verify build artifacts
        run: |
          echo "üîç Verifying build output..."
          
          # Check main files exist
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Missing dist/index.js"
            exit 1
          fi
          
          if [ ! -f "dist/cli/index.js" ]; then
            echo "‚ùå Missing dist/cli/index.js"
            exit 1
          fi
          
          # Check CLI is executable
          if [ ! -x "dist/cli/index.js" ]; then
            echo "‚ùå CLI file is not executable"
            exit 1
          fi
          
          # Check TypeScript declarations
          if [ ! -f "dist/index.d.ts" ]; then
            echo "‚ùå Missing TypeScript declarations"
            exit 1
          fi
          
          echo "‚úÖ Build artifacts verified"
          
      - name: Test package installation
        if: matrix.node-version == '20.x'
        run: |
          # Pack and test installation
          npm pack
          TARBALL=$(ls ${{ env.PACKAGE_NAME }}-*.tgz)
          
          echo "üì¶ Testing package: ${TARBALL}"
          
          # Test global installation
          npm install -g "${TARBALL}"
          
          # Verify CLI is available
          if ! which ${{ env.PACKAGE_NAME }} > /dev/null; then
            echo "‚ùå CLI not found in PATH after global install"
            exit 1
          fi
          
          echo "‚úÖ Package installation test passed"
          
      - name: Upload build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            ${{ env.PACKAGE_NAME }}-*.tgz
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "üîç Running security audit..."
          if npm audit --audit-level=high; then
            echo "‚úÖ No high-severity vulnerabilities found"
          else
            echo "‚ùå High-severity vulnerabilities detected"
            echo "Please run 'npm audit fix' to resolve issues"
            exit 1
          fi
          
      - name: Check for known vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          npm audit --json > audit-results.json || true
          
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: ${HIGH_VULNS}"
          echo "Critical vulnerabilities: ${CRITICAL_VULNS}"
          
          if [ "${HIGH_VULNS}" -gt 0 ] || [ "${CRITICAL_VULNS}" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found - blocking release"
            exit 1
          fi
          
          echo "‚úÖ No critical security issues found"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, quality-check, security-scan]
    environment: 
      name: production
      url: https://www.npmjs.com/package/$\{\{ env.PACKAGE_NAME }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Install dependencies
        run: npm ci
        
      - name: Prepare for publication
        run: |
          echo "üìã Pre-publication checklist..."
          
          # Verify package.json fields
          echo "Verifying package.json..."
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'bin'];
            for (const field of required) {
              if (!pkg[field]) {
                console.error(\`‚ùå Missing required field: \${field}\`);
                process.exit(1);
              }
            }
            console.log('‚úÖ Package.json validation passed');
          "
          
          # Check files array
          if [ -f "package.json" ]; then
            node -e "
              const pkg = require('./package.json');
              if (pkg.files && pkg.files.includes('dist/')) {
                console.log('‚úÖ Dist directory included in files array');
              } else {
                console.log('‚ö†Ô∏è Warning: dist/ not explicitly in files array');
              }
            "
          fi
          
      - name: Dry run publish
        run: |
          echo "üß™ Testing publication (dry run)..."
          npm publish --dry-run --access public
          echo "‚úÖ Dry run successful"
          
      - name: Publish to NPM
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"
          
          echo "üì¶ Publishing ${{ env.PACKAGE_NAME }}@${VERSION} to NPM..."
          
          if [ "${IS_PRERELEASE}" = "true" ]; then
            echo "üöÄ Publishing as pre-release with 'beta' tag"
            npm publish --access public --tag beta
          else
            echo "üöÄ Publishing as stable release with 'latest' tag"
            npm publish --access public
          fi
          
          echo "‚úÖ Successfully published to NPM!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify publication
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          echo "‚è≥ Waiting for NPM registry to update..."
          sleep 45
          
          echo "üîç Verifying publication..."
          for i in {1..5}; do
            NPM_VERSION=$(npm view ${{ env.PACKAGE_NAME }} version 2>/dev/null || echo "not-found")
            
            if [ "${NPM_VERSION}" = "${VERSION}" ]; then
              echo "‚úÖ Package successfully published and available on NPM"
              echo "üì¶ Version ${VERSION} is live at https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
              break
            else
              echo "‚è≥ Registry still updating... (attempt ${i}/5)"
              echo "   Expected: ${VERSION}, Found: ${NPM_VERSION}"
              if [ $i -eq 5 ]; then
                echo "‚ö†Ô∏è Registry verification timed out, but publication likely succeeded"
              else
                sleep 30
              fi
            fi
          done
          
      - name: Test installation from NPM
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          echo "üß™ Testing installation from NPM registry..."
          
          # Create a temporary directory
          mkdir -p /tmp/npm-test
          cd /tmp/npm-test
          
          # Test installation
          if npm install -g ${{ env.PACKAGE_NAME }}@${VERSION}; then
            echo "‚úÖ Global installation successful"
          else
            echo "‚ùå Global installation failed"
            exit 1
          fi
          
          # Test CLI availability
          if which ${{ env.PACKAGE_NAME }} > /dev/null; then
            echo "‚úÖ CLI is available in PATH"
          else
            echo "‚ùå CLI not found in PATH"
            exit 1
          fi
          
          echo "‚úÖ NPM installation test passed"
          
      - name: Create deployment summary
        if: always()
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"
          CHANGELOG_UPDATED="${{ needs.validate.outputs.changelog_updated }}"
          
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "### ‚úÖ Successfully Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**${{ env.PACKAGE_NAME }} v${VERSION}** has been published to NPM!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${IS_PRERELEASE}" = "true" ]; then
              echo "üöÄ **Pre-release** published with \`beta\` tag" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "npm install -g ${{ env.PACKAGE_NAME }}@beta" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "üöÄ **Stable release** published with \`latest\` tag" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "npm install -g ${{ env.PACKAGE_NAME }}@${VERSION}" >> $GITHUB_STEP_SUMMARY
              echo "npm install -g ${{ env.PACKAGE_NAME }}@latest" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "### üß™ Dry Run Completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! Version ${VERSION} is ready to publish." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Publication Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The publication process encountered an error. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Release Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${IS_PRERELEASE}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changelog Updated**: ${CHANGELOG_UPDATED}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ [NPM Package](https://www.npmjs.com/package/${{ env.PACKAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- üìà [NPM Downloads](https://www.npmjs.com/package/${{ env.PACKAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "- üìù [Release Notes](${{ github.event.release.html_url }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- üìä [GitHub Action](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Post-deployment Notifications
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always() && !cancelled()
    
    steps:
      - name: Notification summary
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "üéâ Successfully published ${{ env.PACKAGE_NAME }}@${VERSION}"
            echo "üì¶ Package is now available on NPM"
            echo "üîó https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
          else
            echo "‚ùå Publication failed for version ${VERSION}"
            echo "Check the workflow logs for details"
          fi
